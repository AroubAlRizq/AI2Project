pip install flask flask-cors tensorflow
from flask import Flask, request, jsonify
from flask_cors import CORS
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import os

app = Flask(__name__)
CORS(app)

# Load CNN models
cnn_no_dropout_model = load_model("CNN_No_Dropout.h5")
cnn_with_dropout_model = load_model("CNN_With_Dropout.h5")

# Helper function to preprocess the image
def preprocess_image(image_path):
    # Open the image and resize it to the required input size (assumed to be 128x128 here)
    image = Image.open(image_path).convert("RGB").resize((128, 128))
    image_array = np.array(image) / 255.0  # Normalize to [0, 1]
    image_array = np.expand_dims(image_array, axis=0)  # Add batch dimension
    return image_array

@app.route('/classify', methods=['POST'])
def classify_image():
    if 'file' not in request.files:
        return jsonify({'error': 'No file uploaded'}), 400

    file = request.files['file']
    file_path = "uploaded_image.jpg"
    file.save(file_path)  # Save the uploaded image

    # Preprocess the image
    image_array = preprocess_image(file_path)

    # Perform classification with both models
    result_no_dropout = (cnn_no_dropout_model.predict(image_array) > 0.5).astype("int32")[0][0]
    result_with_dropout = (cnn_with_dropout_model.predict(image_array) > 0.5).astype("int32")[0][0]

    # Majority voting (only for 2 models; returns 0 or 1)
    final_result = 1 if (result_no_dropout + result_with_dropout) >= 1 else 0

    # Clean up the uploaded file
    os.remove(file_path)

    # Return the classification result
    return jsonify({
        'CNN_No_Dropout': int(result_no_dropout),
        'CNN_With_Dropout': int(result_with_dropout),
        'Final_Result': int(final_result)
    })

if __name__ == '__main__':
    app.run(debug=True)
